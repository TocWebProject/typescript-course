*** Notes about TypeScript ***

Ts is an extension to Js. Most popular static type extension for Js.
-> Ts adding some safety stuff for big project
-> We see error when transpiling and not in the runtime
-> With Ts we can have Data Types, helps us to work with entitites, ex: entity: user with properties.
-> Ts cant be run into browsers directly, need to be transpiled into Js
-> We carn run JS and Ts simultaneously in the same project
-> Ts helps to write code betters -- Plan for the app a real architectur and data types


Ex with class Person

JAVASCRIPT

class Person {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    getFullName() {
        return this.firstName + " " + this.lastName
    }
}

const person = new Person("Monster, "lessons")

TypeScript

class Person {
    firstName: string;
    lastName: string;

    constructor(firstName: string, lastName: string) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    getFullName(): string {
        return this.firstName + " " + this.lastName
    }
}

const person = new Person("Monster, "lessons")



*** SETTING UP ***

-> Need node 
-> Install TypeScript Globaly / tsc -v

to transpile some file: we run command line tsc main.ts to create main.js
TypeScript transpiles by default to ES3

Use the -w watch mode to compile at each changes: tsc main.ts -w



*** CONFIG tscong.json ***

Configure compilerOptions: rootDir & outDir
Then just "tsc -w" in the terminal and no more "tsc main.ts -w"



*** VARIABLES ***

Const are real Const. asigning a type.

-> this can not working:
const hello = "world";
hello = "foo"

To change a propertie we need to use "let" of course !

let hello = "world";
hello = "foo";

WARNING: WE CAN CHANGE VALUE ONLY TO THE SAME TYPE. 
-> the type stay consistant

its also better to always specify types explicitly in definition

We using let & const in Ts but TypeScript transpiles everything in JS ES3
so "let" in main.ts hello: string = "world"; will be var hello = "world"; in main.js



*** FUNCTIONS ***

Its safer to define everything explicitly !



*** INTERFACES ***

Interfaces in Ts help us to create objects with properties, help us to describe entitites
By default all properties inside interface are mandatory but if a type can be undefined we have to put "?" after his declaration.

It's not just about code style, its about trying to plan the architecture in entitites et how they communicate each other.
WARNING not creating to many Interfaces

    * Functions in Interfaces *
    Definition of the type in of the function the interface
    Then adding the function into our users declarations.
    Add a postfix to the interface name to prevent Name collusion with class



*** TYPES AND UNIONS ***

    * Union operator in TypeScript *
    operator to combine data types

    * Types alias in TypeScript *
    We have in TypeScript Basic Type: String, Number, Array ect..
    But we can create our own Type alias



*** ANY / VOID / NEVER / UNKNOWN ***
    
    VOID: to say that we dont return something from the function

    ANY: type turns off TypeScript checks
    ANY is not a solution, but start of bigger problems

    NEVER: Function with never can't be executed to the end

    UNKNOWN: all types are assignable to unknown.

